// in order to run the format() function you must have a 2 dimensional array
// in this example the array is called "studentArray" but should be changed to fit
// formatter
function format() {
    var labels = [];
    // iterate through each core element (other than the top row)
    for (var i = 1; i < studentArray.length; i++) {
        var row = studentArray[i];
        for (var o = 1; o < row.length; o++) {
            // find labels in the middle (not names)
            labels.push(row[o]);
        }
    }

    // remove duplicates from the array
    var labels = labels.filter(removeDuplicates);

    // filter numbers out of the array
    var labels = labels.filter(removeNumbers);

    // labels list is complete 

    // create a map that holds labels + names   
    const hnxMap = new Map();

    // for each label in the list find the names that go with them
    for (var x = 0; x < labels.length; x++) {
        // create a list of names that go with the label
        var names = [];
        // iterate through the values
        for (var z = 1; z < studentArray.length; z++) {
            var row = studentArray[z];
            for (var y = 1; y < row.length; y++) {
                // if this value is the label that is being looked at
                if (row[y] == labels[x]) {
                    // add the name corrisponding to the label to its list
                    names.push("\"" + row[0] + "\"");
                }
            }
        }

        // add the list and the label to the map
        hnxMap.set(labels[x], names); 
    }

    
    // print results in csv format for the widget
    // declare counters and text 
    var counter = 0;
    var text = "";

    // print brackets on the beginning and the end
    console.log("{");
    for (let [key, value] of hnxMap) {
        // for each key and value of the map, iterate the counter
        // print the key and values
        counter++;  
        text = ("\"" + key + "\"" + " : " + "[" + value + "]");

        // if this is the not the last row put a comma at the end of the row
        if (counter != labels.length) {
            text += ",";
        }

        // print the line of text
        console.log(text);
    }
    console.log("}");

    
}

// removeDuplicates uses the filter function to return only unique values within an array
function removeDuplicates(value, index, self) {
    return self.indexOf(value) === index;
}


function removeNumbers(value, index) {
    if (isNaN(value.charAt(0))) {
        return index;
    }
}
